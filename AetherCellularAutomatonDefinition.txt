Aether - Cellular automaton in which every position in the grid has a non-negative integer value. 
		This value is exchanged between neighboring positions (von Neumann) following a set of rules. 
		The total value of the grid is always conserved. 


Definition:

	Each step, the following actions are performed for every position:
	
	1. Make a list of the von Neumann neighbors whose value is smaller than that of the current position. If no neighbors meet this condition do nothing.
	2. Create a temporary value for each neighbor in the list initialized to zero.
	3. Compare the value of the current position with the biggest value from the neighbors in the list. 
	4. Subtract this value difference from the current position's value, and divide it between all neighbors in the list and the current position.
		If there is any reminder from the division add it back to the current position's value.
	5. Add the quotient of this division to the temporary values of each neighbor in the list, not to the neighbor's values.
	6. Also add the quotient to the current position's value.
	7. Transfer to the neighbors in the list, with value equal to the biggest value in the list, their corresponding temporary values. And remove them from the list.
	8. If the list is not empty jump back to action 3. Note that the value of the current position may be smaller while the values of the remaining neighbors 
		in the list has not changed. Only their temporary values may be bigger.
	

	The values of the positions at the next step result from adding to each position's remaining value the value transferred to them by their neighbors.
	
	Note that, because the value transferred to a neighbor depends on the values of the other neighbors, it is not enough to know the value of a position 
	and that of its von Neumann neighbors at a given step to know the value this position will have at the next step. 	
	
	
2D Example:

	step 0
	+---+---+---+
	|   |   |   |
	+---+---+---+
	|   |101|   |
	+---+---+---+
	|   |   |   |
	+---+---+---+

	Start off with a grid padded with 0 and a value of 101 at one position.

	Perform the actions for the position with value 101:

		1.	Make a list of von Neumann neighbors with smaller value. In this example, all four neighbors have smaller value (0):
			[{dir: UP, value: 0}, {dir: DOWN, value: 0}, {dir: LEFT, value: 0}, {dir: RIGHT, value: 0}]

		2.	Create temp values
			[{dir: UP, value: 0, tempValue: 0}, {dir: DOWN, value: 0, tempValue: 0}, {dir: LEFT, value: 0, tempValue: 0}, {dir: RIGHT, value: 0, tempValue: 0}]
			
		3.	Compare the current position's value (101) with the biggest from the list (0)
			101 - 0 = 101

		4. 	Subtract the difference from the current position's value
			101 - 101 = 0
			
			Divide it between the neighbors in the list (4) and the current position
			101/(4 + 1) = 20
			
			Add the remainder (1) back to the current position
			0 + 101%5 = 1
			
		5. 	Add the quotient (20) to the neighbors' temp values
			[{dir: UP, value: 0, tempValue: 20}, {dir: DOWN, value: 0, tempValue: 20}, {dir: LEFT, value: 0, tempValue: 20}, {dir: RIGHT, value: 0, tempValue: 20}]

		6.	Add the quotient to the current position's value
			1 + 20 = 21

		7.	Transfer to the neighbors with value equal to the largest in the list (0) their corresponding temp values
			UP +20, DOWN +20, LEFT +20, RIGHT +20

			Remove them from the list
			[]
			
		8. The list is empty

		
	The resulting configuration is as follows:


	step 1
	+---+---+---+---+---+
	|   |   |   |   |   |
	+---+---+---+---+---+
	|   |   | 20|   |   |
	+---+---+---+---+---+
	|   | 20| 21| 20|   |
	+---+---+---+---+---+
	|   |   | 20|   |   |
	+---+---+---+---+---+
	|   |   |   |   |   |
	+---+---+---+---+---+

	Perform actions again:

	Top position with value 20:

		1.	In this case there are only three neighbors in the list since one neighbor has a value bigger than that of the current position (DOWN: 21)
			[{dir: UP, value: 0}, {dir: LEFT, value: 0}, {dir: RIGHT, value: 0}]

		2.	Create temp values
			[{dir: UP, value: 0, tempValue: 0}, {dir: LEFT, value: 0, tempValue: 0}, {dir: RIGHT, value: 0, tempValue: 0}]
			
		3.	Compare the current position's value (20) with the biggest from the list (0)
			20 - 0 = 20

		4. 	Subtract the difference from the current position's value
			20 - 20 = 0
			
			Divide it between the neighbors in the list (3) and the current position
			20/(3 + 1) = 5
			
			Add the remainder (0) back to the current position
			0 + 20%4 = 0
			
		5. 	Add the quotient (5) to the neighbors' temp values
			[{dir: UP, value: 0, tempValue: 5}, {dir: LEFT, value: 0, tempValue: 5}, {dir: RIGHT, value: 0, tempValue: 5}]

		6.	Add the quotient to the current position's value
			0 + 5 = 5

		7.	Transfer to the neighbors with value equal to the largest in the list (0) their corresponding temp values
			UP +5, LEFT +5, RIGHT +5

			Remove them from the list
			[]
			
		8. The list is empty
		

	For all other positions with value 20 the actions will be equivalent those above, only changing the direction of the neighbors.


	Center position with value 21:
		
		1.	[{dir: UP, value: 20}, {dir: DOWN, value: 20}, {dir: LEFT, value: 20}, {dir: RIGHT, value: 20}]

		2.	[{dir: UP, value: 20, tempValue: 0}, {dir: DOWN, value: 20, tempValue: 0}, {dir: LEFT, value: 20, tempValue: 0}, {dir: RIGHT, value: 20, tempValue: 0}]
			
		3.	21 - 20 = 1

		4. 	Subtract the difference from the current position's value
			21 - 1 = 20
			
			Divide it between the neighbors in the list (4) and the current position
			1/(4 + 1) = 0
			
			Add the remainder (1) back to the current position
			20 + 1%5 = 21
			
		5. 	Add the quotient (0) to the neighbor's temp values
			[{dir: UP, value: 20, tempValue: 0}, {dir: DOWN, value: 20, tempValue: 0}, {dir: LEFT, value: 20, tempValue: 0}, {dir: RIGHT, value: 20, tempValue: 0}]

		6.	Add the quotient to the current position's value
			21 + 0 = 21

		7.	Transfer to the neighbors with value equal to the largest in the list (0) their corresponding temp values 
			UP +0, DOWN +0, LEFT +0, RIGHT +0

			Remove them from the list
			[]
			
		8. The list is empty

		
		In this case the actions have no effect.


	The resulting configuration is as follows:

	
	step 2
	+---+---+---+---+---+
	|   |   |  5|   |   |
	+---+---+---+---+---+
	|   | 10|  5| 10|   |
	+---+---+---+---+---+
	|  5|  5| 21|  5|  5|
	+---+---+---+---+---+
	|   | 10|  5| 10|   |
	+---+---+---+---+---+
	|   |   |  5|   |   |
	+---+---+---+---+---+

	Note that the corner positions with value 10 received value 5 from two of their neighbors. These values are added up to get the resulting value.

	Perform actions again:

	Top left corner with value 10:

		1.	In this case all neighbors are smaller but with two different values
			[{dir: UP, value: 0}, {dir: DOWN, value: 5}, {dir: LEFT, value: 0}, {dir: RIGHT, value: 5}]

		2.	Create temp values
			[{dir: UP, value: 0, tempValue: 0}, {dir: DOWN, value: 5, tempValue: 0}, {dir: LEFT, value: 0, tempValue: 0}, {dir: RIGHT, value: 5, tempValue: 0}]
			
		3.	Compare the current position's value (10) with the biggest from the list (5)
			10 - 5 = 5

		4. 	Subtract the difference from the current position's value
			10 - 5 = 5
			
			Divide it between the neighbors in the list (4) and the current position
			5/(4 + 1) = 1
			
			Add the remainder (0) back to the current position
			5 + 5%5 = 5
			
		5. 	Add the quotient (1) to the neighbors' temp values
			[{dir: UP, value: 0, tempValue: 1}, {dir: DOWN, value: 5, tempValue: 1}, {dir: LEFT, value: 0, tempValue: 1}, {dir: RIGHT, value: 5, tempValue: 1}]

		6.	Add the quotient to the current position's value
			5 + 1 = 6

		7.	Transfer to the neighbors with value equal to the largest in the list (5) their corresponding temp values
			DOWN +1, RIGHT +1

			Remove them from the list
			[{dir: UP, value: 0, tempValue: 1}, {dir: LEFT, value: 0, tempValue: 1}]
			
		8. In this case the list is not empty, so jump back to step 3
		
		3(II).  Compare the current position's remaining value (6) with the biggest from the list (0)
				6 - 0 = 6
				
		4(II). 	Subtract the difference from the current position's value
				6 - 6 = 0
				
				Divide it between the remaining neighbors in the list (2) and the current position
				6/(2 + 1) = 2
				
				Add the remainder (0) back to the current position
				0 + 6%3 = 0
				
		5(II). 	Add the quotient (2) to the neighbor's temp values
				[{dir: UP, value: 0, tempValue: 3}, {dir: LEFT, value: 0, tempValue: 3}]
				
		6(II).	Add the quotient to the current position's value
				0 + 2 = 2
				
		7(II).	Transfer to the neighbors with value equal to the largest in the list (0) their corresponding temp values
				UP +3, LEFT +3

				Remove them from the list
				[]
			
		8(II). The list is empty


	Perform the actions for all other neighbors to get the next step's configuration:
	

	step 3
	+---+---+---+---+---+---+---+
	|   |   |   |  1|   |   |   |
	+---+---+---+---+---+---+---+
	|   |   |  4|  2|  4|   |   |
	+---+---+---+---+---+---+---+
	|   |  4|  2| 10|  2|  4|   |
	+---+---+---+---+---+---+---+
	|  1|  2| 10|  9| 10|  2|  1|
	+---+---+---+---+---+---+---+
	|   |  4|  2| 10|  2|  4|   |
	+---+---+---+---+---+---+---+
	|   |   |  4|  2|  4|   |   |
	+---+---+---+---+---+---+---+
	|   |   |   |  1|   |   |   |
	+---+---+---+---+---+---+---+

	Continue until the value is so spread out that the actions take no effect.


	step 4
	+---+---+---+---+---+---+---+---+---+
	|   |   |   |   |   |   |   |   |   |
	+---+---+---+---+---+---+---+---+---+
	|   |   |   |  1|  1|  1|   |   |   |
	+---+---+---+---+---+---+---+---+---+
	|   |   |  2|  2|  4|  2|  2|   |   |
	+---+---+---+---+---+---+---+---+---+
	|   |  1|  2|  6|  4|  6|  2|  1|   |
	+---+---+---+---+---+---+---+---+---+
	|   |  1|  4|  4|  9|  4|  4|  1|   |
	+---+---+---+---+---+---+---+---+---+
	|   |  1|  2|  6|  4|  6|  2|  1|   |
	+---+---+---+---+---+---+---+---+---+
	|   |   |  2|  2|  4|  2|  2|   |   |
	+---+---+---+---+---+---+---+---+---+
	|   |   |   |  1|  1|  1|   |   |   |
	+---+---+---+---+---+---+---+---+---+
	|   |   |   |   |   |   |   |   |   |
	+---+---+---+---+---+---+---+---+---+


	step 5
	+---+---+---+---+---+---+---+---+---+
	|   |   |   |   |   |   |   |   |   |
	+---+---+---+---+---+---+---+---+---+
	|   |   |   |  1|  2|  1|   |   |   |
	+---+---+---+---+---+---+---+---+---+
	|   |   |  2|  3|  3|  3|  2|   |   |
	+---+---+---+---+---+---+---+---+---+
	|   |  1|  3|  4|  5|  4|  3|  1|   |
	+---+---+---+---+---+---+---+---+---+
	|   |  2|  3|  5|  5|  5|  3|  2|   |
	+---+---+---+---+---+---+---+---+---+
	|   |  1|  3|  4|  5|  4|  3|  1|   |
	+---+---+---+---+---+---+---+---+---+
	|   |   |  2|  3|  3|  3|  2|   |   |
	+---+---+---+---+---+---+---+---+---+
	|   |   |   |  1|  2|  1|   |   |   |
	+---+---+---+---+---+---+---+---+---+
	|   |   |   |   |   |   |   |   |   |
	+---+---+---+---+---+---+---+---+---+


	step 6
	+---+---+---+---+---+---+---+---+---+
	|   |   |   |   |  1|   |   |   |   |
	+---+---+---+---+---+---+---+---+---+
	|   |   |   |  2|  1|  2|   |   |   |
	+---+---+---+---+---+---+---+---+---+
	|   |   |  2|  2|  4|  2|  2|   |   |
	+---+---+---+---+---+---+---+---+---+
	|   |  2|  2|  4|  4|  4|  2|  2|   |
	+---+---+---+---+---+---+---+---+---+
	|  1|  1|  4|  4|  5|  4|  4|  1|  1|
	+---+---+---+---+---+---+---+---+---+
	|   |  2|  2|  4|  4|  4|  2|  2|   |
	+---+---+---+---+---+---+---+---+---+
	|   |   |  2|  2|  4|  2|  2|   |   |
	+---+---+---+---+---+---+---+---+---+
	|   |   |   |  2|  1|  2|   |   |   |
	+---+---+---+---+---+---+---+---+---+
	|   |   |   |   |  1|   |   |   |   |
	+---+---+---+---+---+---+---+---+---+


	step 7

	+---+---+---+---+---+---+---+---+---+
	|   |   |   |   |  1|   |   |   |   |
	+---+---+---+---+---+---+---+---+---+
	|   |   |   |  2|  2|  2|   |   |   |
	+---+---+---+---+---+---+---+---+---+
	|   |   |  2|  2|  3|  2|  2|   |   |
	+---+---+---+---+---+---+---+---+---+
	|   |  2|  2|  4|  4|  4|  2|  2|   |
	+---+---+---+---+---+---+---+---+---+
	|  1|  2|  3|  4|  5|  4|  3|  2|  1|
	+---+---+---+---+---+---+---+---+---+
	|   |  2|  2|  4|  4|  4|  2|  2|   |
	+---+---+---+---+---+---+---+---+---+
	|   |   |  2|  2|  3|  2|  2|   |   |
	+---+---+---+---+---+---+---+---+---+
	|   |   |   |  2|  2|  2|   |   |   |
	+---+---+---+---+---+---+---+---+---+
	|   |   |   |   |  1|   |   |   |   |
	+---+---+---+---+---+---+---+---+---+

	END